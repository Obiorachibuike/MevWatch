// This file is generated by Gemini.

'use server';

/**
 * @fileOverview Analyzes transaction times to identify potential MEV bots.
 *
 * - analyzeTransactionTime - A function that analyzes transaction times.
 * - AnalyzeTransactionTimeInput - The input type for the analyzeTransactionTime function.
 * - AnalyzeTransactionTimeOutput - The return type for the analyzeTransactionTime function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const BotTransactionSchema = z.object({
    address: z.string().describe("The Ethereum address of the bot."),
    timestamp: z.number().describe("The timestamp of the bot's transaction."),
});

const AnalyzeTransactionTimeInputSchema = z.object({
  victimTransactionTime: z
    .number()
    .describe('The timestamp of the victim transaction.'),
  botTransactions: z
    .array(BotTransactionSchema)
    .describe('An array of bot transactions, each with an address and a timestamp.'),
  blockTimeThreshold: z
    .number()
    .default(12) // Assuming 6 seconds per block, 2 blocks = 12 seconds
    .describe(
      'The time threshold (in seconds) within which a bot transaction is considered close to the victim transaction (default: 12 seconds).' //Assuming 6 seconds per block
    ),
});

export type AnalyzeTransactionTimeInput = z.infer<
  typeof AnalyzeTransactionTimeInputSchema
>;

const AnalyzeTransactionTimeOutputSchema = z.object({
  isMEVBotActivity: z
    .boolean()
    .describe(
      'Whether or not the bot activity is indicative of MEV bot activity.'
    ),
  numberOfCloseTransactions: z
    .number()
    .describe(
      'The number of bot transactions that occurred within the blockTimeThreshold of the victim transaction.'
    ),
  botAddresses: z
    .array(z.string())
    .describe(
      'The Ethereum addresses of the bots identified as potentially engaging in MEV activity.'
    ),
  explanation: z
    .string()
    .describe(
      'A brief explanation of why the activity is or is not likely MEV bot activity.'
    ),
});

export type AnalyzeTransactionTimeOutput = z.infer<
  typeof AnalyzeTransactionTimeOutputSchema
>;

export async function analyzeTransactionTime(
  input: AnalyzeTransactionTimeInput
): Promise<AnalyzeTransactionTimeOutput> {
  return analyzeTransactionTimeFlow(input);
}

const analyzeTransactionTimePrompt = ai.definePrompt({
  name: 'analyzeTransactionTimePrompt',
  input: {schema: AnalyzeTransactionTimeInputSchema},
  output: {schema: AnalyzeTransactionTimeOutputSchema},
  prompt: `You are a blockchain security analyst tasked with identifying MEV bot activity.

You are given the timestamp of a victim transaction and an array of transactions from various bots, each with an address and a timestamp.

Determine if the bot activity is indicative of MEV bot activity based on the proximity of the bot transactions to the victim transaction.

Consider a transaction to be closely related if it occurs within {{blockTimeThreshold}} seconds of the victim transaction.

Victim Transaction Time: {{victimTransactionTime}}
Bot Transactions:
{{#each botTransactions}}
- Address: {{this.address}}, Timestamp: {{this.timestamp}}
{{/each}}

Analyze the provided data and determine if the bot activity suggests MEV behavior.

Only include the addresses of the bots whose transactions are within the time threshold in the 'botAddresses' output field.

Respond with a JSON object.
`,
});

const analyzeTransactionTimeFlow = ai.defineFlow(
  {
    name: 'analyzeTransactionTimeFlow',
    inputSchema: AnalyzeTransactionTimeInputSchema,
    outputSchema: AnalyzeTransactionTimeOutputSchema,
  },
  async input => {
    const {output} = await analyzeTransactionTimePrompt(input);
    return output!;
  }
);
